<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="从2015年接触Xamarin到至今已经2个年头，我对Xamarin的技能没有长进多少，但它却已经足够成熟到在跨平台移动开发工具中占有一席之地。在扫了一些资料之后，突然发现国外有很多移动端的应用已经是" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>是时候开始用C#快速开发移动应用了 - 腾飞（Jesse) - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/simplememory/bundle-simplememory.min.css?v=OL4qeo1LNGlN1rKIhv5UctANvt0M6Nx6kLzr_ffx3Xk" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/jesse2013/custom.css?v=DB/sw3iTGnXC/2h0J9yhKcfI5&#x2B;k=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/SimpleMemory/bundle-SimpleMemory-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/jesse2013/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/jesse2013/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/jesse2013/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 159331;
        var currentBlogApp = 'jesse2013';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleMemory';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <link rel="stylesheet" type="text/css" href="https://files.cnblogs.com/jesse2013/mystle.css?v=10132013.10">
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/jesse2013/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/jesse2013/">腾飞（Jesse）</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/jesse2013/">
首页</a>
</li>
<li>


</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E8%85%BE%E9%A3%9E%EF%BC%88Jesse%29">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/jesse2013/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
46&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
3661</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/jesse2013/p/start-to-develop-with-xamarin.html">是时候开始用C#快速开发移动应用了</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>　　从2015年接触Xamarin到至今已经2个年头，我对Xamarin的技能没有长进多少，但它却已经足够成熟到在跨平台移动开发工具中占有一席之地。在扫了一些资料之后，突然发现国外有很多移动端的应用已经是用Xamarin开发，Telerik还有专门的团队来开发Xamarin UI 库，这再次激发起了我的兴趣！吓得我赶紧找了个视频做了个demo， 下面就一起来体验一下用C# 开发一个Material Deisgn风格的Android应用的乐趣吧。</p>
<p>先来看一下我们开发出来的应用是个什么样子？一个酷炫的tab view 和 list</p>
<p style="text-align: center;"><img src="https://images2015.cnblogs.com/blog/554526/201706/554526-20170607223343356-1311336479.gif" alt="" /></p>
<p style="text-align: center;">下面是一个左侧菜单</p>
<p style="text-align: center;"><img src="https://images2015.cnblogs.com/blog/554526/201706/554526-20170607223410809-315641531.gif" alt="" /></p>
<p style="text-align: center;">这是一个Collapsing Tool Bar的实现效果</p>
<p style="text-align: center;"><img src="https://images2015.cnblogs.com/blog/554526/201706/554526-20170607223437778-1348324865.gif" alt="" /></p>
<p style="text-align: center;">最后还有一个bottom sheet</p>
<p style="text-align: center;"><img src="https://images2015.cnblogs.com/blog/554526/201706/554526-20170607223553981-1451914530.gif" alt="" /></p>
<p>　　</p>
<p>整个例子中好玩的地方非常多，我们分为UI和C#代码两块来看。因为在整个UI层几乎是和原生Android开发一模一样，所以如果原来做过Android开发又懂C#，那用Xamarin来开发安卓程序几乎是没有什么学习成本 。那么对于没有Android开发经验的C#同学来说，学习Android的UI绘制则是必不可少的部份。</p>
<p>&nbsp;</p>
<p>UI层的开发</p>
<ul>
<li>Layout 与 Widget</li>
<li>Material Design 和 Android Support Library&nbsp;</li>
<li>AppbarLayout + TabLayout</li>
<li>DrawerLayout + NavigationView&nbsp;</li>
<li>CollapsingLayout + NestedView + CardView</li>
<li>ListView 与 RecyclerView&nbsp;</li>
</ul>
<p>C#代码完成的那些事</p>
<ul>
<li>控件与事件绑定</li>
<li>Activity 之间数据传递</li>
<li>多线程</li>
</ul>
<h2>Layout与Widget</h2>
<p>Android的页面视图由XML来声明，而所有页面的这些UI组件都由一个布局（Layout）来组织。Android最早一共提供了6种基本布局。</p>
<ul>
<li>Linear Layout</li>
<li>Relative Layout</li>
<li>Table Layout</li>
<li>Grid View</li>
<li>Tab Layout</li>
<li>List View</li>
</ul>
<p>Widget则是一些其它的UI组件</p>
<ul>
<li>Date Picker</li>
<li>Time Picker</li>
<li>Form Elements(Button, TextView, CheckBox, RadioButton, Toggle Button, Rating Bar)</li>
<li>Spinner</li>
<li>Auto Complete</li>
<li>Gallery</li>
<li>WebView</li>
<li>Tool Bar</li>
<li>View Pager</li>
<li>等...</li>
</ul>
<p>&nbsp;</p>
<p>我们将会在后续的文章来详细再介绍这些Layout 和 Widgets的使用，今天我们的主角不是他们。而是Google基本Material Design 为android 开发的一套Design Support Library。</p>
<p>&nbsp;</p>
<h2>Material Design&nbsp;和 Design Support Library</h2>
<p>关于Material Deisgn已经有一份非常详细的中文文档http://design.1sters.com/，Google在2014年推出的全新的设计语言，这种设计语言旨在为手机、平板电脑、台式机和&ldquo;其他平台&rdquo;提供更一致、更广泛的&ldquo;外观和感觉&rdquo;。Google遵循MD设计风格重构了自己的几个主要APP并发布了安卓的DesignSupportLibrary来让大家更好地开发基于这种设计风格的APP。</p>
<p>我们的Demo中用到的组件包括：</p>
<ul>
<li>AppBarLayout + Tab Layout 实现 图1中的Tab视图</li>
<li>Drawer Layout +&nbsp;Navigation View 实现图3中的左侧菜单</li>
<li>CoordinatorLayout</li>
<li>CollapsingToolbar Layout + NestedScrollView (图2中的页面往下滚图片缩小直到消失的效果实现 ）</li>
<li>Recycler View （ListView的加强版，适合数据量大的List展示）</li>
</ul>
<p>由于后面的三个CoordinatorLayout、CollapsingToolbar以及RecyclerView相对来说会有些复杂，所有我们后面会留专门的篇幅来讲，感兴趣的同学可以自己先研究起来或者关注后面的博客~</p>
<h2>AppBarLayout + Tab Layout&nbsp;</h2>
<p>TabLayout可以说是一个非常好用的视图，你几乎在每一个主流的APP里面都可以看到。我们用Support Library实现起来就非常的方便，下面是这几个组件的结构，ViewPager与AppBarLayout同级。</p>
<p>　　<img src="https://images2015.cnblogs.com/blog/554526/201706/554526-20170607075059731-18712431.png" alt="" /></p>
<p>这里不太想给大家展示太多关于UI层的代码，如果感兴趣的同学可以直接到我的GitHub里面去下载。我们主要看一下C#如何在ViewPager里面放视图同时与TabLayout关联起来。只需要3步：</p>
<ol>
<li>找到tab和view控件</li>
<li>通过TabAdapter给ViewPager设置视图</li>
<li>将ViewPager绑定到tab</li>
</ol>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">var</span> tabs = FindViewById&lt;TabLayout&gt;<span style="color: #000000;">(Resource.Id.tabs);
</span><span style="color: #0000ff;">var</span> viewPager = FindViewById&lt;ViewPager&gt;<span style="color: #000000;">(Resource.Id.viewpager);

SetUpViewPager(viewPager);
tabs.SetupWithViewPager(viewPager);</span></pre>
</div>
<p>SetUpViewPager方法如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> SetUpViewPager(ViewPager viewPager)
{
    </span><span style="color: #0000ff;">var</span> adapter = <span style="color: #0000ff;">new</span><span style="color: #000000;"> TabAdapter(SupportFragmentManager);
    adapter.AddFragment(</span><span style="color: #0000ff;">new</span> Fragment1(), <span style="color: #800000;">"</span><span style="color: #800000;">Fragment 1</span><span style="color: #800000;">"</span><span style="color: #000000;">);
    adapter.AddFragment(</span><span style="color: #0000ff;">new</span> Fragment2(), <span style="color: #800000;">"</span><span style="color: #800000;">Fragment 2</span><span style="color: #800000;">"</span><span style="color: #000000;">);
    adapter.AddFragment(</span><span style="color: #0000ff;">new</span> Fragment3(), <span style="color: #800000;">"</span><span style="color: #800000;">Fragment 3</span><span style="color: #800000;">"</span><span style="color: #000000;">);

    viewPager.Adapter </span>=<span style="color: #000000;"> adapter;
}</span></pre>
</div>
<p>是不是很简单？</p>
<h2>DrawerLayout + NavigationView&nbsp;</h2>
<p>图3中的左侧菜单，主流APP必备，也是只要几行代码就可以了。</p>
<p>　　<img src="https://images2015.cnblogs.com/blog/554526/201706/554526-20170607080407668-38998688.png" alt="" /></p>
<p>在NavigationView的使用上，有两个属性需要注意一下。一个左侧菜单分为两部份：headerLayout和menu。</p>
<p>　　<img src="https://images2015.cnblogs.com/blog/554526/201706/554526-20170607232130387-2008965413.png" alt="" /></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">android.support.design.widget.NavigationView
        </span><span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/nav_view"</span><span style="color: #ff0000;">
        android:layout_height</span><span style="color: #0000ff;">="match_parent"</span><span style="color: #ff0000;">
        android:layout_width</span><span style="color: #0000ff;">="325dp"</span><span style="color: #ff0000;">
        android:layout_gravity</span><span style="color: #0000ff;">="start"</span><span style="color: #ff0000;">
        android:fitsSystemWindows</span><span style="color: #0000ff;">="true"</span><span style="color: #ff0000;">
        app:headerLayout</span><span style="color: #0000ff;">="@layout/nav_header"</span><span style="color: #ff0000;">
        app:menu</span><span style="color: #0000ff;">="@menu/drawer_view"</span> <span style="color: #0000ff;">/&gt;</span></pre>
</div>
<p>所以我们需要有另外两个文件nav_header和drawer_view来配合一起完成这个菜单视图。</p>
<p>　　<img src="https://images2015.cnblogs.com/blog/554526/201706/554526-20170607081110293-937306429.png" alt="" /></p>
<p>　　nav_header其实很简单用了一个&lt;ImageView&gt;来显示图片，以及一个&lt;TextView&gt;来显示上面图里面的UserName。我们可以看一下app:menu="@menu/drawer_view"的drawer_view是如何构建成菜单项的。</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"</span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">menu </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span><span style="color: #0000ff;">&gt;</span>
  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">group </span><span style="color: #ff0000;">android:checkableBehavior</span><span style="color: #0000ff;">="single"</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item
        </span><span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/nav_home"</span><span style="color: #ff0000;">
        android:icon</span><span style="color: #0000ff;">="@drawable/ic_dashboard"</span><span style="color: #ff0000;">
        android:title</span><span style="color: #0000ff;">="Home"</span> <span style="color: #0000ff;">/&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item
        </span><span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/nav_messages"</span><span style="color: #ff0000;">
        android:icon</span><span style="color: #0000ff;">="@drawable/ic_event"</span><span style="color: #ff0000;">
        android:title</span><span style="color: #0000ff;">="Messages"</span> <span style="color: #0000ff;">/&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item
        </span><span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/nav_friends"</span><span style="color: #ff0000;">
        android:icon</span><span style="color: #0000ff;">="@drawable/ic_headset"</span><span style="color: #ff0000;">
        android:title</span><span style="color: #0000ff;">="Friends"</span> <span style="color: #0000ff;">/&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item
        </span><span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/nav_discussion"</span><span style="color: #ff0000;">
        android:icon</span><span style="color: #0000ff;">="@drawable/ic_forum"</span><span style="color: #ff0000;">
        android:title</span><span style="color: #0000ff;">="Discussion"</span> <span style="color: #0000ff;">/&gt;</span>
  <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">group</span><span style="color: #0000ff;">&gt;</span>
  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">android:title</span><span style="color: #0000ff;">="Sub items"</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">menu</span><span style="color: #0000ff;">&gt;</span>
      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item
          </span><span style="color: #ff0000;">android:icon</span><span style="color: #0000ff;">="@drawable/ic_dashboard"</span><span style="color: #ff0000;">
          android:title</span><span style="color: #0000ff;">="Sub item 1"</span> <span style="color: #0000ff;">/&gt;</span>
      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item
          </span><span style="color: #ff0000;">android:icon</span><span style="color: #0000ff;">="@drawable/ic_forum"</span><span style="color: #ff0000;">
          android:title</span><span style="color: #0000ff;">="Sub item 2"</span> <span style="color: #0000ff;">/&gt;</span>
    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">menu</span><span style="color: #0000ff;">&gt;</span>
  <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">item</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">menu</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　实现一个这样的菜单只需要5分钟就搞定了~</p>
<h2>控件与事件绑定</h2>
<p>在VS操纵UI组件是一件非常简单的事。找到这个控件，接下来一切都变得简单，和之前的winform以及webform几乎是没有两样。</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> OnCreate(Bundle bundle)
        {
            </span><span style="color: #0000ff;">base</span><span style="color: #000000;">.OnCreate(bundle);

            </span><span style="color: #008000;">//</span><span style="color: #008000;"> Set our view from the "main" layout resource</span>
<span style="color: #000000;">            SetContentView(Resource.Layout.Main);

            </span><span style="color: #0000ff;">var</span> btnSelectDate = FindViewById&lt;Button&gt;<span style="color: #000000;">(Resource.Id.btnDateSelector);
            </span><span style="color: #008000;">//</span><span style="color: #008000;"> 事件绑定匿名函数</span>
            btnSelectDate.Click += (o, e) =&gt;<span style="color: #000000;">
            {
                </span><span style="color: #0000ff;">var</span> dialog =<span style="color: #000000;"> Fragments.DatePickerFragment.NewInstance();
                dialog.OnDateSelected </span>+= Dialog_OnDateSelected; <span style="color: #008000;">//</span><span style="color: #008000;"> 事件绑定另一个方法</span>
                dialog.Show(FragmentManager, <span style="color: #800000;">"</span><span style="color: #800000;">tag</span><span style="color: #800000;">"</span><span style="color: #000000;">);
            };
        }

        </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Dialog_OnDateSelected(DateTime dt)
        {
            </span><span style="color: #0000ff;">var</span> txtDate = FindViewById&lt;TextView&gt;<span style="color: #000000;">(Resource.Id.txtDate);
            txtDate.Text </span>=<span style="color: #000000;"> dt.ToLongDateString();
        }</span></pre>
</div>
<p>在上面的代码中我们找到了 btnSelectDate的代码，然后绑定了它的Click事件来打开一个选择日期的Dialog。这里的事件处理我们用的是一个匿名方法。</p>
<p>而在这个Dialog的OnDateSelected事件我们则绑定了一个声明方法。注：OnDateSelected这个事件是我们自己声明的，而这个声明方法，相信大家不会觉得陌生。</p>
<pre><span style="color: #c0c0c0;">DatePickerFragment.cs中用委托来声明事件，当然你也可以用传递Action的方式来解决。</span></pre>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">delegate</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> DateSelectedHandle(DateTime dt);
        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">event</span><span style="color: #000000;"> DateSelectedHandle OnDateSelected;
        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> OnDateSet(DatePicker view, <span style="color: #0000ff;">int</span> year, <span style="color: #0000ff;">int</span> monthOfYear, <span style="color: #0000ff;">int</span><span style="color: #000000;"> dayOfMonth)
        {
            </span><span style="color: #0000ff;">var</span> selectedDate = <span style="color: #0000ff;">new</span> DateTime(year, monthOfYear + <span style="color: #800080;">1</span><span style="color: #000000;">, dayOfMonth);
            </span><span style="color: #0000ff;">if</span> (OnDateSelected != <span style="color: #0000ff;">null</span><span style="color: #000000;">)
            {
                OnDateSelected(selectedDate);
            }
        }</span></pre>
</div>
<p>这就是100%的C#代码。</p>
<h2>Activity 之间数据传递</h2>
<p>&nbsp; Android中Layout与Activity大家可以理解为webform中的.aspx页面与.aspx.cs code behind。 只是在Activity中我们还需要手动通过FindViewById来找到这个UI组件。如果Activity代表了一整个View，那我们来看看在不同的View之间如何传递数据。</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">var</span> context =<span style="color: #000000;"> view.Context;
 </span><span style="color: #008000;">//</span><span style="color: #008000;"> CheeseDetailActivity是我们要跳转过去的Activity</span>
<span style="color: #0000ff;">var</span> intent = <span style="color: #0000ff;">new</span> Intent(context, <span style="color: #0000ff;">typeof</span><span style="color: #000000;">(CheeseDetailActivity)); 
</span><span style="color: #008000;">//</span><span style="color: #008000;"> 将数据Put到Extra中即可 EXTRA_NAME为这个数据的key</span>
<span style="color: #000000;">intent.PutExtra(CheeseDetailActivity.EXTRA_NAME, values[position]);
context.StartActivity(intent);</span></pre>
</div>
<p>在CheeseDetailActivity中，只需要通过Intent.GetStringExtra(); 来获取即可</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">string</span> cheeseName = Intent.GetStringExtra(EXTRA_NAME);</pre>
</div>
<h2>多线程</h2>
<p>其实这里的多线程本不需要被提起，我只是为了向大家展示一下，这种线程处理也是100%C#来写。毕竟，越小的差异对于我们来说学习成本就越小。只是这里要注意一下，如果在非主线程中要操作UI，则需要调用RunOnUiThread（这名字起的也是好。。）</p>
<div class="cnblogs_code">
<pre> <span style="color: #0000ff;">void</span> signUpDialog_mOnSignUpComplete(<span style="color: #0000ff;">object</span><span style="color: #000000;"> sender, OnSignUpEventArgs e)
        {
            mProgressBar.Visibility </span>=<span style="color: #000000;"> ViewStates.Visible;
            Task.Run(() </span>=&gt;<span style="color: #000000;">
            {
                Thread.Sleep(</span><span style="color: #800080;">3000</span><span style="color: #000000;">);
                RunOnUiThread(() </span>=&gt; { mProgressBar.Visibility =<span style="color: #000000;"> ViewStates.Invisible; });
            });
        }</span></pre>
</div>
<h2>小结&nbsp;</h2>
<p>　　 在这个盛行全干的时代，我想每个人都应该懂移动端开发。Xamarin为我们提供了一种简单、高效的方式来开发强大的、如原生般体验的APP。结合C#优雅的语法和宇宙最强大的IDE，这个事情也许值得一试。</p>
<p>&nbsp; &nbsp; &nbsp;&nbsp;<img src="https://images2015.cnblogs.com/blog/554526/201706/554526-20170608071532215-714704656.png" alt="" /></p>
<p style="text-align: center;">&nbsp; &nbsp; &nbsp; 你还可以扫描下面的二维码通过微信来看这篇文章。</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="https://images2015.cnblogs.com/blog/554526/201706/554526-20170607232550622-385181921.png" alt="" /></p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2017-06-08 08:50</span>&nbsp;
<a href="https://www.cnblogs.com/jesse2013/">腾飞（Jesse)</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=6953786" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(6953786);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 159331, cb_blogApp = 'jesse2013', cb_blogUserGuid = 'dfb583e1-aefc-e211-8d02-90b11c0b17d6';
    var cb_entryId = 6953786, cb_entryCreatedDate = '2017-06-08 08:50', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 腾飞（Jesse)
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>